#line 2 "F:\\code\\kiviuq\\php\\src\\r5\\syntax\\lexer.yy.cpp"
#line 2 "F:\code\kiviuq\php\src\r5\syntax\lexer.l"

/*
	$ [KiPHP] /r5/syntax/lexer.l  (1406)    (C) 2005-2014  MF
*/


#define KI_RING			5

#define KI_SYNTAX_DEFINITION


#include "../../kiviuq.h"
#include "../syntax.h"
#include "../syntax_lexer.h"






#line 24 "F:\\code\\kiviuq\\php\\src\\r5\\syntax\\lexer.yy.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 74
#define YY_END_OF_BUFFER 75
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[460] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       75,    4,    4,   51,   50,   50,   20,    8,    9,   51,
       20,   20,    7,   19,   19,   20,   20,   21,   20,   20,
       20,   12,   15,   21,   21,   21,   21,   21,   21,   48,
       48,   48,   48,   48,   48,   48,   48,   48,   48,   48,
       48,   48,   48,   48,   48,   48,   48,   48,   20,   48,
       20,   20,   74,   74,   56,   53,   56,   63,   57,   63,
       63,   63,   64,   65,   66,   74,   67,   68,   71,   70,
       70,   73,   73,    3,   23,    0,   49,   25,   24,    0,

        0,    0,    0,    0,    0,    0,   22,    0,    0,   15,
       18,   11,   10,   17,   14,    0,    0,   15,   22,   23,
       23,   22,    5,    8,    7,    0,   12,   15,   48,   48,
       48,   48,   37,   48,   48,   48,   48,   48,   48,   37,
       48,   48,   48,   48,   48,   48,   48,   48,   48,   48,
       36,   48,   48,   48,   48,   48,   48,   30,   48,   48,
       48,   48,   48,   48,   48,   48,   48,   48,   48,    0,
       54,   55,   61,   58,   59,    0,    0,   65,   69,   70,
       72,    1,    0,   26,    6,   49,    0,    0,    0,    0,
        0,    0,    0,    0,   17,    0,   13,   16,   27,   14,

       15,   48,   30,   48,   48,   48,   48,   48,   48,   48,
       48,   42,   48,   48,   48,   48,   48,   48,   48,   48,
       37,   48,   48,   48,   48,   48,   48,   48,   48,   31,
       48,   48,   48,   48,   48,   48,   48,   48,   48,   48,
       40,   48,   48,   30,   48,   48,   48,   48,   48,   52,
       61,   59,   60,    0,   69,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   18,    0,    0,   17,   48,   48,
       48,   38,   48,   48,   48,   48,   48,   48,   42,   36,
       48,   42,   42,   48,   48,   48,   48,   48,   48,   48,
       48,   48,   48,   48,   44,   45,   48,   48,   48,   48,

       48,   48,   48,   48,   45,   48,   48,   48,   48,   48,
       48,   48,   48,   59,   60,    0,   62,    2,    0,    0,
        0,    0,   28,    0,    0,    0,    0,   17,   48,   44,
       39,   40,   32,   31,   34,   48,   48,   48,   43,   48,
       45,   34,   48,   48,   48,   48,   48,   48,   48,   43,
       48,   48,   48,   48,   48,   48,   48,   40,   43,   37,
       48,   48,   48,   48,   48,   48,    0,   29,    0,    0,
        0,    0,    0,    0,   48,   48,   48,   36,   48,   48,
       48,   48,   35,   48,   48,   48,   48,   48,   48,   33,
       48,   35,   34,   38,   48,   48,   48,   48,   48,   48,

        0,    0,    0,    0,    0,   48,   48,   38,   32,   40,
       37,   48,   48,   41,   48,   48,   33,   48,   41,   48,
       47,   48,   48,   48,   48,    0,    0,   34,   39,   35,
       48,   48,   48,   48,   48,   48,   48,   48,   48,   48,
       48,   48,   32,   33,   48,   46,   48,   48,   32,   48,
       31,   48,   48,   48,   48,   48,   41,   41,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    6,    7,    8,    9,   10,   11,   12,
       13,   14,   15,   16,   17,   18,   19,   20,   21,   22,
       22,   22,   22,   22,   22,   23,   23,   24,   25,   26,
       27,   28,   29,   30,   31,   32,   33,   34,   35,   36,
       37,   38,   39,   40,   41,   42,   43,   44,   45,   46,
       47,   48,   49,   50,   51,   52,   53,   54,   55,   56,
       57,   58,   59,   60,   61,    1,   62,   63,   64,   65,

       66,   67,   68,   69,   70,   71,   72,   73,   74,   75,
       76,   77,   78,   79,   80,   81,   82,   83,   84,   85,
       86,   56,   87,   88,   89,   90,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[91] =
    {   0,
        1,    1,    1,    1,    1,    2,    1,    2,    1,    1,
        1,    1,    1,    1,    1,    1,    3,    1,    1,    4,
        4,    4,    5,    1,    1,    1,    1,    1,    1,    1,
        6,    7,    7,    7,    7,    6,    8,    8,    8,    8,
        8,    8,    8,    9,    8,    8,    8,    9,    8,    9,
        8,    8,    8,    9,    8,    8,    1,    2,    1,    1,
        8,    6,    7,    7,    7,    7,    6,    8,    8,    8,
        8,    8,    8,    8,    9,    8,    8,    8,    9,    8,
        9,    8,    8,    8,    9,    8,    1,    1,   10,    1
    } ;

static yyconst flex_int16_t yy_base[482] =
    {   0,
     1107, 1106,    0,    0, 1105, 1104,   80,   81,   87,   88,
      175,    0,    0,    0,  258,  259,   94,   96, 1115, 1069,
     1082, 1134, 1040, 1134, 1134, 1134, 1041, 1134, 1061,    0,
     1037,   91, 1134,  318, 1134,  949,   87, 1134,   88,   99,
       98,  250,  109,  948,  107,   76,   96,  943,  130,  237,
       65,  245,  239,  256,  252,   86,    0,  252,   98,  289,
       92,  305,  107,  308,  254,  231,  242,  249,  941,  906,
      250, 1134, 1134,  937, 1134, 1134,   96, 1134, 1134,    0,
      322,  957, 1134,    0, 1134,    0, 1134, 1134, 1134, 1134,
      959, 1134,  942,  324,  933,    0,    0, 1134, 1134,  283,

      292,  314,  318,  320,  333,  316, 1134,  135,  142,  382,
      388, 1134, 1134,  392,  398,  128,    0,  408,  932, 1134,
      931,  930, 1134, 1134, 1134,  351,  412,  415,    0,  326,
      352,  345,    0,  387,  390,  410,  381,  406,  408,    0,
      407,  397,  401,  417,  410,  408,  407,  404,  413,  414,
        0,  415,  435,  413,  414,  411,  423,    0,  459,  437,
      455,  456,  450,  453,  452,  457,  469,  461,  488,  928,
     1134, 1134,    0, 1134,  357,    0,    0,    0,    0, 1134,
     1134, 1134,  472, 1134,    0,    0,  463,  467,  462,  469,
      467,  479,  475,  543,  547,  556,  146,    0, 1134,  505,

      563,  478,    0,  518,  525,  522,  539,  525,  531,  540,
      550,    0,  546,  557,  543,  552,  545,  561,  548,  567,
      564,  567,  569,  560,  562,  557,  573,  574,  560,    0,
      569,  562,  565,  574,  566,  567,  569,  584,  591,  602,
        0,  608,  602,    0,  609,  613,  615,  614,  620, 1134,
        0,  636,    0,  600,    0,  613,  629,  619,  630,  632,
      660,  634,  631,  656,  682,  691,  695,  699,  648,  643,
      658,    0,  669,  660,  675,  673,  685,  674,    0,  689,
      676,    0,    0,  688,  698,  692,  704,  686,  706,  704,
      691,  712,  696,  695,    0,    0,  715,  712,  709,  710,

      702,  712,  719,  700,    0,  707,  723,  729,  713,  727,
      727,  728,  735, 1134, 1134,  599, 1134, 1134,  731,  774,
      748,  743, 1134,  757,  762,  752,  784,  790,  766,    0,
        0,    0,    0,    0,    0,  754,  757,  765,    0,  774,
        0,  772,  782,  779,  777,  777,  788,  779,  795,    0,
      783,  801,  802,  788,  793,  805,  803,    0,    0,    0,
      793,  626,  808,  811,  812,  810,  668, 1134,  821,  820,
      667,  821,  807,  821,  826,  809,  811,    0,  814,  815,
      833,  831,    0,  842,  845,  848,  851,  849,  835,    0,
      858,    0,    0,    0,  846,  611,  610,  846,  603,  852,

      854,  538,  851,  534,  533,  850,  868,    0,    0,    0,
        0,  860,  861,  406,  871,  876,    0,  875,  338,  321,
        0,  308,  875,  275,  883,  280,  266,    0,    0,    0,
      868,  874,  875,  886,  888,  878,  111,  880,  109,  883,
      889,  902,    0,    0,  895,    0,  898,  108,    0,  910,
        0,  911,  100,  911,  912,   82,    0,    0, 1134,  978,
      988,  998, 1008, 1018, 1028, 1038, 1043, 1049, 1053, 1061,
     1067, 1071, 1078, 1084, 1090, 1094, 1100, 1102, 1108, 1114,
     1118
    } ;

static yyconst flex_int16_t yy_def[482] =
    {   0,
      460,  460,  459,    3,  461,  461,  462,  462,  463,  463,
      459,   11,  464,  464,  461,  461,  465,  465,  466,  466,
      459,  459,  459,  459,  459,  459,  459,  459,  459,  467,
      459,  459,  459,  459,  459,  459,  459,  459,  459,  459,
      459,  459,  459,  459,  459,  459,  459,  459,  459,  468,
      468,  468,  468,  468,  468,  468,  468,  468,  468,  468,
      468,  468,  468,  468,  468,  468,  468,  468,  459,  468,
      459,  459,  459,  459,  459,  459,  459,  459,  459,  469,
      470,  459,  459,  471,  459,  472,  459,  459,  459,  459,
      459,  459,  459,  459,  459,  473,  474,  459,  459,  459,

      459,  459,  459,  459,  459,  459,  459,  459,  459,  459,
      459,  459,  459,  459,  459,  459,  475,  459,  459,  459,
      459,  459,  459,  459,  459,  459,  459,  459,  468,  468,
      468,  468,  468,  468,  468,  468,  468,  468,  468,  468,
      468,  468,  468,  468,  468,  468,  468,  468,  468,  468,
      468,  468,  468,  468,  468,  468,  468,  468,  468,  468,
      468,  468,  468,  468,  468,  468,  468,  468,  468,  459,
      459,  459,  476,  459,  459,  477,  478,  471,  479,  459,
      459,  459,  459,  459,  473,  474,  459,  459,  459,  459,
      459,  459,  459,  459,  459,  459,  459,  475,  459,  459,

      459,  468,  468,  468,  468,  468,  468,  468,  468,  468,
      468,  468,  468,  468,  468,  468,  468,  468,  468,  468,
      468,  468,  468,  468,  468,  468,  468,  468,  468,  468,
      468,  468,  468,  468,  468,  468,  468,  468,  468,  468,
      468,  468,  468,  468,  468,  468,  468,  468,  468,  459,
      476,  459,  480,  481,  479,  459,  459,  459,  459,  459,
      459,  459,  459,  459,  459,  459,  459,  459,  468,  468,
      468,  468,  468,  468,  468,  468,  468,  468,  468,  468,
      468,  468,  468,  468,  468,  468,  468,  468,  468,  468,
      468,  468,  468,  468,  468,  468,  468,  468,  468,  468,

      468,  468,  468,  468,  468,  468,  468,  468,  468,  468,
      468,  468,  468,  459,  459,  481,  459,  459,  459,  459,
      459,  459,  459,  459,  459,  459,  459,  459,  468,  468,
      468,  468,  468,  468,  468,  468,  468,  468,  468,  468,
      468,  468,  468,  468,  468,  468,  468,  468,  468,  468,
      468,  468,  468,  468,  468,  468,  468,  468,  468,  468,
      468,  468,  468,  468,  468,  468,  459,  459,  459,  459,
      459,  459,  459,  459,  468,  468,  468,  468,  468,  468,
      468,  468,  468,  468,  468,  468,  468,  468,  468,  468,
      468,  468,  468,  468,  468,  468,  468,  468,  468,  468,

      459,  459,  459,  459,  459,  468,  468,  468,  468,  468,
      468,  468,  468,  468,  468,  468,  468,  468,  468,  468,
      468,  468,  468,  468,  468,  459,  459,  468,  468,  468,
      468,  468,  468,  468,  468,  468,  468,  468,  468,  468,
      468,  468,  468,  468,  468,  468,  468,  468,  468,  468,
      468,  468,  468,  468,  468,  468,  468,  468,    0,  459,
      459,  459,  459,  459,  459,  459,  459,  459,  459,  459,
      459,  459,  459,  459,  459,  459,  459,  459,  459,  459,
      459
    } ;

static yyconst flex_int16_t yy_nxt[1225] =
    {   0,
       24,   25,   26,   25,   27,   28,   29,   30,   31,   32,
       33,   34,   35,   36,   37,   38,   39,   40,   41,   42,
       43,   43,   43,   44,   38,   45,   46,   47,   48,   49,
       50,   51,   52,   53,   54,   55,   56,   57,   58,   57,
       57,   59,   57,   60,   61,   62,   57,   63,   64,   65,
       66,   57,   67,   68,   57,   57,   35,   24,   35,   69,
       70,   50,   51,   52,   53,   54,   55,   56,   57,   58,
       57,   57,   59,   57,   60,   61,   62,   57,   63,   64,
       65,   66,   57,   67,   68,   57,   35,   71,   35,   72,
       76,   76,   79,   79,   80,   80,   90,   91,   90,   91,

       99,  107,  121,   99,  107,  108,  171,  109,  110,  110,
      110,  112,  134,   98,   98,   99,  113,   98,  111,  111,
      111,  111,  120,  122,   98,   98,  114,  150,  118,  118,
      118,  118,  119,  120,  120,  124,  155,   77,   77,  158,
      125,  161,  446,  134,   81,   81,  126,  197,  197,  127,
      128,  128,  128,  172,  111,  111,  111,  111,  150,  114,
      456,  109,  109,  109,  109,  197,  197,  155,  446,  448,
      158,  446,  161,   82,   82,   73,   73,   73,   73,   73,
       73,   73,   83,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,

       73,   73,   73,   73,   73,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   73,   73,   73,   73,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   73,   73,   73,   73,   86,   86,  114,  130,  115,
      115,  115,  109,  138,  166,  135,   98,  139,  323,  167,
      131,  116,  146,  140,  132,  133,  136,  151,  141,  137,
      147,  164,  368,  168,  152,  153,  148,  142,  143,  130,

      154,  165,  149,  117,  138,  166,  135,  144,  139,  145,
      167,  131,  116,  146,  140,  132,  133,  136,  151,  141,
      137,  147,  164,  156,  168,  152,  153,  148,  142,  143,
      187,  154,  165,  149,  117,  421,  188,   99,  144,  157,
      145,  175,  175,  175,   87,   87,   88,   88,  100,  101,
      182,  102,  159,  103,  156,  160,  104,  162,  189,  190,
      163,  187,  105,  191,  192,  193,  106,  188,  421,  183,
      157,  128,  128,  128,  202,  176,  252,  252,  252,  100,
      101,  437,  102,  159,  103,  203,  160,  104,  162,  189,
      190,  163,  204,  105,  191,  192,  193,  106,  436,  114,

      183,  118,  118,  118,  118,  202,  176,  111,  111,  111,
      111,  195,  195,  195,  195,  114,  203,  115,  115,  115,
      109,  205,  194,  204,  210,  114,  196,  118,  118,  118,
      118,  200,  200,  200,  201,  201,  201,  201,  206,  207,
      208,  211,  212,  116,  213,  214,  215,  216,  217,  219,
      220,  221,  205,  194,  209,  210,  222,  196,  223,  218,
      224,  228,  229,  230,  231,  117,  432,  225,  234,  206,
      207,  208,  211,  212,  116,  213,  214,  215,  216,  217,
      219,  220,  221,  226,  227,  209,  237,  222,  238,  223,
      218,  224,  228,  229,  230,  231,  117,  232,  225,  234,

      239,  235,  240,  233,  236,  242,  241,  243,  244,  256,
      257,  258,  259,  260,  226,  227,  261,  237,  262,  238,
      245,  246,  263,  247,  200,  200,  200,  269,  232,  248,
      249,  239,  235,  240,  233,  236,  242,  241,  243,  244,
      256,  257,  258,  259,  260,  368,  368,  261,  270,  262,
      323,  245,  246,  263,  247,  271,  272,  264,  269,  264,
      248,  249,  265,  265,  265,  265,  195,  195,  195,  195,
      267,  273,  267,  274,  275,  268,  268,  268,  268,  270,
      278,  266,  201,  201,  201,  201,  271,  272,  276,  277,
      279,  280,  281,  282,  283,  284,  285,  286,  287,  288,

      289,  290,  273,  291,  274,  275,  292,  293,  294,  295,
      296,  278,  266,  297,  298,  299,  300,  301,  302,  276,
      277,  279,  280,  281,  282,  283,  284,  285,  286,  287,
      288,  289,  290,  303,  291,  304,  305,  292,  293,  294,
      295,  296,  306,  307,  297,  298,  299,  300,  301,  302,
      308,  309,  312,  310,  313,  314,  314,  314,  318,  319,
      320,  321,  322,  424,  303,  311,  304,  305,  325,  326,
      422,  421,  323,  306,  307,  265,  265,  265,  265,  323,
      368,  308,  309,  312,  310,  313,  396,  317,  317,  318,
      319,  320,  321,  322,  324,  329,  311,  330,  331,  325,

      326,  265,  265,  265,  265,  327,  332,  327,  333,  334,
      328,  328,  328,  328,  268,  268,  268,  268,  268,  268,
      268,  268,  335,  336,  337,  324,  329,  338,  330,  331,
      339,  340,  341,  342,  343,  344,  345,  332,  346,  333,
      334,  347,  348,  349,  350,  351,  352,  353,  354,  355,
      356,  357,  358,  335,  336,  337,  359,  360,  338,  361,
      362,  339,  340,  341,  342,  343,  344,  345,  363,  346,
      364,  365,  347,  348,  349,  350,  351,  352,  353,  354,
      355,  356,  357,  358,  366,  367,  368,  359,  360,  370,
      361,  362,  371,  372,  373,  374,  375,  376,  377,  363,

      378,  364,  365,  328,  328,  328,  328,  379,  369,  328,
      328,  328,  328,  380,  381,  366,  367,  382,  383,  384,
      370,  385,  386,  371,  372,  373,  374,  375,  376,  377,
      387,  378,  388,  389,  390,  391,  392,  393,  379,  369,
      394,  395,  397,  398,  380,  381,  399,  400,  382,  383,
      384,  401,  385,  386,  402,  403,  404,  405,  406,  407,
      408,  387,  409,  388,  389,  390,  391,  392,  393,  410,
      411,  394,  395,  397,  398,  412,  413,  399,  400,  414,
      415,  416,  401,  417,  418,  402,  403,  404,  405,  406,
      407,  408,  419,  409,  420,  423,  425,  426,  427,  428,

      410,  411,  429,  430,  431,  433,  412,  413,  434,  435,
      414,  415,  416,  438,  417,  418,  439,  440,  441,  442,
      443,  444,  445,  419,  447,  420,  423,  425,  426,  427,
      428,  449,  450,  429,  430,  431,  433,  451,  452,  434,
      435,  453,  454,  455,  438,  457,  458,  439,  440,  441,
      442,  443,  444,  445,  250,  447,  199,  184,  199,  184,
      181,  180,  449,  450,  177,  170,  169,   98,  451,  452,
      123,   99,  453,  454,  455,   98,  457,  458,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   75,   75,

       75,   75,   75,   75,   75,   75,   75,   75,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   89,   89,
       89,   89,   89,   89,   89,   89,   89,   89,   92,   92,
       92,   92,   92,   92,   92,   92,   92,   92,   97,   97,
       97,   97,  129,  129,  129,  129,  129,  129,  173,  173,
      173,  173,  174,   98,  174,   96,  174,   95,   94,  174,
      178,  178,  178,  178,  178,  178,  179,  179,  179,  179,
      185,  459,   93,  185,  185,  185,  185,  186,  186,  186,
      186,  186,  186,  198,  198,  198,  198,  251,  251,  251,

      251,  251,  251,  253,  253,  253,  253,  254,  254,  254,
      254,  255,  255,  255,  255,  255,  255,  315,  315,  315,
      315,  316,  316,  316,  316,  316,  316,  316,   93,   74,
       74,   23,   23,   21,  459,  459,  459,  459,  459,  459,
      459,  459,  459,  459,  459,  459,  459,  459,  459,  459,
      459,  459,  459,  459,  459,  459,  459,  459,  459,  459,
      459,  459,  459,  459,  459,  459,  459,  459,  459,  459,
      459,  459,  459,  459,  459,  459,  459,  459,  459,  459,
      459,  459,  459,  459,  459,  459,  459,  459,  459,  459,
      459,  459,  459,  459,  459,  459,  459,  459,  459,  459,

      459,  459,  459,  459,  459,  459,  459,  459,  459,  459,
      459,  459,  459,  459,  459,  459,  459,  459,  459,  459,
      459,  459,  459,  459
    } ;

static yyconst flex_int16_t yy_chk[1225] =
    {   0,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        7,    8,    9,   10,    9,   10,   17,   17,   18,   18,

       32,   37,   46,   46,   39,   39,   77,   39,   39,   39,
       39,   41,   51,   37,   39,   39,   41,   32,   40,   40,
       40,   40,   47,   47,   41,   40,   43,   56,   43,   43,
       43,   43,   45,   45,   45,   49,   59,    7,    8,   61,
       49,   63,  456,   51,    9,   10,   49,  116,  116,   49,
       49,   49,   49,   77,  108,  108,  108,  108,   56,  109,
      453,  109,  109,  109,  109,  197,  197,   59,  448,  439,
       61,  437,   63,    9,   10,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   15,   16,   42,   50,   42,
       42,   42,   42,   53,   66,   52,   71,   53,  427,   67,
       50,   42,   55,   53,   50,   50,   52,   58,   54,   52,
       55,   65,  426,   68,   58,   58,   55,   54,   54,   50,

       58,   65,   55,   42,   53,   66,   52,   54,   53,   54,
       67,   50,   42,   55,   53,   50,   50,   52,   58,   54,
       52,   55,   65,   60,   68,   58,   58,   55,   54,   54,
      100,   58,   65,   55,   42,  424,  101,   71,   54,   60,
       54,   81,   81,   81,   15,   16,   15,   16,   34,   34,
       94,   34,   62,   34,   60,   62,   34,   64,  102,  103,
       64,  100,   34,  104,  105,  106,   34,  101,  422,   94,
       60,  126,  126,  126,  130,   81,  175,  175,  175,   34,
       34,  420,   34,   62,   34,  131,   62,   34,   64,  102,
      103,   64,  132,   34,  104,  105,  106,   34,  419,  110,

       94,  110,  110,  110,  110,  130,   81,  111,  111,  111,
      111,  114,  114,  114,  114,  115,  131,  115,  115,  115,
      115,  134,  111,  132,  137,  118,  114,  118,  118,  118,
      118,  127,  127,  127,  128,  128,  128,  128,  135,  135,
      136,  138,  139,  127,  141,  142,  143,  144,  145,  146,
      147,  148,  134,  111,  136,  137,  149,  114,  150,  145,
      152,  154,  155,  156,  157,  127,  414,  153,  160,  135,
      135,  136,  138,  139,  127,  141,  142,  143,  144,  145,
      146,  147,  148,  153,  153,  136,  162,  149,  163,  150,
      145,  152,  154,  155,  156,  157,  127,  159,  153,  160,

      164,  161,  165,  159,  161,  166,  165,  167,  168,  183,
      187,  188,  189,  190,  153,  153,  191,  162,  192,  163,
      169,  169,  193,  169,  200,  200,  200,  202,  159,  169,
      169,  164,  161,  165,  159,  161,  166,  165,  167,  168,
      183,  187,  188,  189,  190,  405,  404,  191,  204,  192,
      402,  169,  169,  193,  169,  205,  206,  194,  202,  194,
      169,  169,  194,  194,  194,  194,  195,  195,  195,  195,
      196,  207,  196,  208,  209,  196,  196,  196,  196,  204,
      211,  195,  201,  201,  201,  201,  205,  206,  210,  210,
      213,  214,  215,  216,  217,  218,  219,  220,  221,  222,

      223,  224,  207,  225,  208,  209,  226,  227,  228,  229,
      231,  211,  195,  232,  233,  234,  235,  236,  237,  210,
      210,  213,  214,  215,  216,  217,  218,  219,  220,  221,
      222,  223,  224,  238,  225,  239,  240,  226,  227,  228,
      229,  231,  242,  243,  232,  233,  234,  235,  236,  237,
      245,  246,  248,  247,  249,  252,  252,  252,  256,  257,
      258,  259,  260,  399,  238,  247,  239,  240,  262,  263,
      397,  396,  261,  242,  243,  264,  264,  264,  264,  371,
      367,  245,  246,  248,  247,  249,  362,  316,  254,  256,
      257,  258,  259,  260,  261,  269,  247,  270,  271,  262,

      263,  265,  265,  265,  265,  266,  273,  266,  274,  275,
      266,  266,  266,  266,  267,  267,  267,  267,  268,  268,
      268,  268,  276,  277,  278,  261,  269,  280,  270,  271,
      281,  284,  285,  286,  287,  288,  289,  273,  290,  274,
      275,  291,  292,  293,  294,  297,  298,  299,  300,  301,
      302,  303,  304,  276,  277,  278,  306,  307,  280,  308,
      309,  281,  284,  285,  286,  287,  288,  289,  310,  290,
      311,  312,  291,  292,  293,  294,  297,  298,  299,  300,
      301,  302,  303,  304,  313,  319,  320,  306,  307,  321,
      308,  309,  322,  324,  325,  326,  329,  336,  337,  310,

      338,  311,  312,  327,  327,  327,  327,  340,  320,  328,
      328,  328,  328,  342,  343,  313,  319,  344,  345,  346,
      321,  347,  348,  322,  324,  325,  326,  329,  336,  337,
      349,  338,  351,  352,  353,  354,  355,  356,  340,  320,
      357,  361,  363,  364,  342,  343,  365,  366,  344,  345,
      346,  369,  347,  348,  370,  372,  373,  374,  375,  376,
      377,  349,  379,  351,  352,  353,  354,  355,  356,  380,
      381,  357,  361,  363,  364,  382,  384,  365,  366,  385,
      386,  387,  369,  388,  389,  370,  372,  373,  374,  375,
      376,  377,  391,  379,  395,  398,  400,  401,  403,  406,

      380,  381,  407,  412,  413,  415,  382,  384,  416,  418,
      385,  386,  387,  423,  388,  389,  425,  431,  432,  433,
      434,  435,  436,  391,  438,  395,  398,  400,  401,  403,
      406,  440,  441,  407,  412,  413,  415,  442,  445,  416,
      418,  447,  450,  452,  423,  454,  455,  425,  431,  432,
      433,  434,  435,  436,  170,  438,  122,  121,  119,   95,
       93,   91,  440,  441,   82,   74,   70,   69,  442,  445,
       48,   44,  447,  450,  452,   36,  454,  455,  460,  460,
      460,  460,  460,  460,  460,  460,  460,  460,  461,  461,
      461,  461,  461,  461,  461,  461,  461,  461,  462,  462,

      462,  462,  462,  462,  462,  462,  462,  462,  463,  463,
      463,  463,  463,  463,  463,  463,  463,  463,  464,  464,
      464,  464,  464,  464,  464,  464,  464,  464,  465,  465,
      465,  465,  465,  465,  465,  465,  465,  465,  466,  466,
      466,  466,  466,  466,  466,  466,  466,  466,  467,  467,
      467,  467,  468,  468,  468,  468,  468,  468,  469,  469,
      469,  469,  470,   31,  470,   29,  470,   27,   23,  470,
      471,  471,  471,  471,  471,  471,  472,  472,  472,  472,
      473,   21,   20,  473,  473,  473,  473,  474,  474,  474,
      474,  474,  474,  475,  475,  475,  475,  476,  476,  476,

      476,  476,  476,  477,  477,  477,  477,  478,  478,  478,
      478,  479,  479,  479,  479,  479,  479,  480,  480,  480,
      480,  481,  481,  481,  481,  481,  481,  481,   19,    6,
        5,    2,    1,  459,  459,  459,  459,  459,  459,  459,
      459,  459,  459,  459,  459,  459,  459,  459,  459,  459,
      459,  459,  459,  459,  459,  459,  459,  459,  459,  459,
      459,  459,  459,  459,  459,  459,  459,  459,  459,  459,
      459,  459,  459,  459,  459,  459,  459,  459,  459,  459,
      459,  459,  459,  459,  459,  459,  459,  459,  459,  459,
      459,  459,  459,  459,  459,  459,  459,  459,  459,  459,

      459,  459,  459,  459,  459,  459,  459,  459,  459,  459,
      459,  459,  459,  459,  459,  459,  459,  459,  459,  459,
      459,  459,  459,  459
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "F:\\code\\kiviuq\\php\\src\\r5\\syntax\\lexer.l"

#define YY_NO_UNISTD_H 1









#line 922 "F:\\code\\kiviuq\\php\\src\\r5\\syntax\\lexer.yy.cpp"

#define INITIAL 0
#define PHP 1
#define PHP_ECHO 2
#define STRING_SIMPLE 3
#define STRING_COMPLEX_TEXT 4
#define STRING_COMPLEX_NAME 5
#define STRING_COMPLEX_END 6
#define STRING_COMPLEX_BLOCK 7
#define COMMENT_SINGLE 8
#define COMMENT_MULTI 9

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

int yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

YYSTYPE * yyget_lval (void );

void yyset_lval (YYSTYPE * yylval_param  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex \
               (YYSTYPE * yylval_param );

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param )
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
        YYSTYPE * yylval;
    
#line 46 "F:\\code\\kiviuq\\php\\src\\r5\\syntax\\lexer.l"




#line 1131 "F:\\code\\kiviuq\\php\\src\\r5\\syntax\\lexer.yy.cpp"

    yylval = yylval_param;

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 460 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1134 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(PHP):
case YY_STATE_EOF(PHP_ECHO):
case YY_STATE_EOF(STRING_SIMPLE):
case YY_STATE_EOF(STRING_COMPLEX_TEXT):
case YY_STATE_EOF(STRING_COMPLEX_NAME):
case YY_STATE_EOF(STRING_COMPLEX_END):
case YY_STATE_EOF(STRING_COMPLEX_BLOCK):
case YY_STATE_EOF(COMMENT_SINGLE):
case YY_STATE_EOF(COMMENT_MULTI):
#line 50 "F:\\code\\kiviuq\\php\\src\\r5\\syntax\\lexer.l"
CALL (eof);											RETURN ( );
	YY_BREAK

case 1:
YY_RULE_SETUP
#line 55 "F:\\code\\kiviuq\\php\\src\\r5\\syntax\\lexer.l"
BEGIN (PHP_ECHO);				CALL (php_open);					WAIVE ( );		RETURN ( );
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 56 "F:\\code\\kiviuq\\php\\src\\r5\\syntax\\lexer.l"
BEGIN (PHP);					CALL (php_open);					COUNT ( );		RETURN ( );
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 57 "F:\\code\\kiviuq\\php\\src\\r5\\syntax\\lexer.l"
BEGIN (PHP);					CALL (php_open);					COUNT ( );		RETURN ( );
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 59 "F:\\code\\kiviuq\\php\\src\\r5\\syntax\\lexer.l"
CONCAT (all);						COUNT ( );
	YY_BREAK


case 5:
YY_RULE_SETUP
#line 65 "F:\\code\\kiviuq\\php\\src\\r5\\syntax\\lexer.l"
BEGIN (INITIAL);				CALL (php_close);					COUNT ( );		RETURN ( );
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 67 "F:\\code\\kiviuq\\php\\src\\r5\\syntax\\lexer.l"
CALL (pragma);						COUNT ( );		RETURN ( );
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 69 "F:\\code\\kiviuq\\php\\src\\r5\\syntax\\lexer.l"
BEGIN (STRING_SIMPLE);			CALL (string_start);				COUNT ( );
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 70 "F:\\code\\kiviuq\\php\\src\\r5\\syntax\\lexer.l"
BEGIN (STRING_COMPLEX_TEXT);	CALL (string_start);				COUNT ( );
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 72 "F:\\code\\kiviuq\\php\\src\\r5\\syntax\\lexer.l"
BEGIN (COMMENT_SINGLE);												COUNT ( );
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 73 "F:\\code\\kiviuq\\php\\src\\r5\\syntax\\lexer.l"
BEGIN (COMMENT_SINGLE);												COUNT ( );
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 74 "F:\\code\\kiviuq\\php\\src\\r5\\syntax\\lexer.l"
BEGIN (COMMENT_MULTI);												COUNT ( );
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 76 "F:\\code\\kiviuq\\php\\src\\r5\\syntax\\lexer.l"
CALL (integer_dec);					COUNT ( );		RETURN ( );
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 77 "F:\\code\\kiviuq\\php\\src\\r5\\syntax\\lexer.l"
CALL (integer_bin);					COUNT ( );		RETURN ( );
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 78 "F:\\code\\kiviuq\\php\\src\\r5\\syntax\\lexer.l"
CALL (integer_oct);					COUNT ( );		RETURN ( );
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 79 "F:\\code\\kiviuq\\php\\src\\r5\\syntax\\lexer.l"
CALL (integer_dec);					COUNT ( );		RETURN ( );
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 80 "F:\\code\\kiviuq\\php\\src\\r5\\syntax\\lexer.l"
CALL (integer_hex);					COUNT ( );		RETURN ( );
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 82 "F:\\code\\kiviuq\\php\\src\\r5\\syntax\\lexer.l"
CALL (double);						COUNT ( );		RETURN ( );
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 83 "F:\\code\\kiviuq\\php\\src\\r5\\syntax\\lexer.l"
CALL (double);						COUNT ( );		RETURN ( );
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 85 "F:\\code\\kiviuq\\php\\src\\r5\\syntax\\lexer.l"
CALL (operator_unary);				COUNT ( );		RETURN ( );
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 86 "F:\\code\\kiviuq\\php\\src\\r5\\syntax\\lexer.l"
CALL (operator_unary);				COUNT ( );		RETURN ( );
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 87 "F:\\code\\kiviuq\\php\\src\\r5\\syntax\\lexer.l"
CALL (operator_unary);				COUNT ( );		RETURN ( );
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 89 "F:\\code\\kiviuq\\php\\src\\r5\\syntax\\lexer.l"
CALL (operator_binary);				COUNT ( );		RETURN ( );
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 90 "F:\\code\\kiviuq\\php\\src\\r5\\syntax\\lexer.l"
CALL (operator_binary);				COUNT ( );		RETURN ( );
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 91 "F:\\code\\kiviuq\\php\\src\\r5\\syntax\\lexer.l"
CALL (operator_binary);				COUNT ( );		RETURN ( );
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 92 "F:\\code\\kiviuq\\php\\src\\r5\\syntax\\lexer.l"
CALL (operator_binary);				COUNT ( );		RETURN ( );
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 94 "F:\\code\\kiviuq\\php\\src\\r5\\syntax\\lexer.l"
CALL (operator_ternary);			COUNT ( );		RETURN ( );
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 95 "F:\\code\\kiviuq\\php\\src\\r5\\syntax\\lexer.l"
CALL (operator_ternary);			COUNT ( );		RETURN ( );
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 97 "F:\\code\\kiviuq\\php\\src\\r5\\syntax\\lexer.l"
CALL (operator_cast);				COUNT ( );		RETURN ( );
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 98 "F:\\code\\kiviuq\\php\\src\\r5\\syntax\\lexer.l"
CALL (operator_cast);				COUNT ( );		RETURN ( );
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 100 "F:\\code\\kiviuq\\php\\src\\r5\\syntax\\lexer.l"
CALL (operator_word);				COUNT ( );		RETURN ( );
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 101 "F:\\code\\kiviuq\\php\\src\\r5\\syntax\\lexer.l"
CALL (operator_word);				COUNT ( );		RETURN ( );
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 103 "F:\\code\\kiviuq\\php\\src\\r5\\syntax\\lexer.l"
CALL (keyword_wrapper);				COUNT ( );		RETURN ( );
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 104 "F:\\code\\kiviuq\\php\\src\\r5\\syntax\\lexer.l"
CALL (keyword_wrapper);				COUNT ( );		RETURN ( );
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 105 "F:\\code\\kiviuq\\php\\src\\r5\\syntax\\lexer.l"
CALL (keyword_wrapper);				COUNT ( );		RETURN ( );
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 106 "F:\\code\\kiviuq\\php\\src\\r5\\syntax\\lexer.l"
CALL (keyword_wrapper);				COUNT ( );		RETURN ( );
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 108 "F:\\code\\kiviuq\\php\\src\\r5\\syntax\\lexer.l"
CALL (keyword_control);				COUNT ( );		RETURN ( );
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 109 "F:\\code\\kiviuq\\php\\src\\r5\\syntax\\lexer.l"
CALL (keyword_control);				COUNT ( );		RETURN ( );
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 110 "F:\\code\\kiviuq\\php\\src\\r5\\syntax\\lexer.l"
CALL (keyword_control);				COUNT ( );		RETURN ( );
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 111 "F:\\code\\kiviuq\\php\\src\\r5\\syntax\\lexer.l"
CALL (keyword_control);				COUNT ( );		RETURN ( );
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 112 "F:\\code\\kiviuq\\php\\src\\r5\\syntax\\lexer.l"
CALL (keyword_control);				COUNT ( );		RETURN ( );
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 114 "F:\\code\\kiviuq\\php\\src\\r5\\syntax\\lexer.l"
CALL (keyword_language);			COUNT ( );		RETURN ( );
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 115 "F:\\code\\kiviuq\\php\\src\\r5\\syntax\\lexer.l"
CALL (keyword_language);			COUNT ( );		RETURN ( );
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 116 "F:\\code\\kiviuq\\php\\src\\r5\\syntax\\lexer.l"
CALL (keyword_language);			COUNT ( );		RETURN ( );
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 117 "F:\\code\\kiviuq\\php\\src\\r5\\syntax\\lexer.l"
CALL (keyword_language);			COUNT ( );		RETURN ( );
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 119 "F:\\code\\kiviuq\\php\\src\\r5\\syntax\\lexer.l"
CALL (constant);					COUNT ( );		RETURN ( );
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 120 "F:\\code\\kiviuq\\php\\src\\r5\\syntax\\lexer.l"
CALL (constant);					COUNT ( );		RETURN ( );
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 121 "F:\\code\\kiviuq\\php\\src\\r5\\syntax\\lexer.l"
CALL (constant);					COUNT ( );		RETURN ( );
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 123 "F:\\code\\kiviuq\\php\\src\\r5\\syntax\\lexer.l"
CALL (identifier);					COUNT ( );		RETURN ( );
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 125 "F:\\code\\kiviuq\\php\\src\\r5\\syntax\\lexer.l"
CALL (variable);					COUNT ( );		RETURN ( );
	YY_BREAK
case 50:
/* rule 50 can match eol */
YY_RULE_SETUP
#line 127 "F:\\code\\kiviuq\\php\\src\\r5\\syntax\\lexer.l"
COUNT ( );
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 129 "F:\\code\\kiviuq\\php\\src\\r5\\syntax\\lexer.l"
CALL (undefined);									RETURN ( );
	YY_BREAK


case 52:
YY_RULE_SETUP
#line 135 "F:\\code\\kiviuq\\php\\src\\r5\\syntax\\lexer.l"
BEGIN (PHP);					CALL (php_echo);					COUNT ( );		RETURN ( );
	YY_BREAK


case 53:
YY_RULE_SETUP
#line 141 "F:\\code\\kiviuq\\php\\src\\r5\\syntax\\lexer.l"
BEGIN (PHP);					CALL (string_end);					COUNT ( );		RETURN ( );
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 143 "F:\\code\\kiviuq\\php\\src\\r5\\syntax\\lexer.l"
CONCAT (escape);					COUNT ( );
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 144 "F:\\code\\kiviuq\\php\\src\\r5\\syntax\\lexer.l"
CONCAT (escape);					COUNT ( );
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
#line 146 "F:\\code\\kiviuq\\php\\src\\r5\\syntax\\lexer.l"
CONCAT (all);						COUNT ( );
	YY_BREAK


case 57:
YY_RULE_SETUP
#line 152 "F:\\code\\kiviuq\\php\\src\\r5\\syntax\\lexer.l"
BEGIN (PHP);					CALL (string_end);					COUNT ( );		RETURN ( );
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 154 "F:\\code\\kiviuq\\php\\src\\r5\\syntax\\lexer.l"
CONCAT (escape);					COUNT ( );
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 156 "F:\\code\\kiviuq\\php\\src\\r5\\syntax\\lexer.l"
CONCAT (value);						COUNT ( );
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 157 "F:\\code\\kiviuq\\php\\src\\r5\\syntax\\lexer.l"
CONCAT (value);						COUNT ( );
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 159 "F:\\code\\kiviuq\\php\\src\\r5\\syntax\\lexer.l"
BEGIN (STRING_COMPLEX_NAME);	CALL (string_complex_next);			WAIVE ( );		RETURN ( );
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 160 "F:\\code\\kiviuq\\php\\src\\r5\\syntax\\lexer.l"
BEGIN (STRING_COMPLEX_BLOCK);	CALL (string_complex_next);			WAIVE ( );		RETURN ( );
	YY_BREAK
case 63:
/* rule 63 can match eol */
YY_RULE_SETUP
#line 162 "F:\\code\\kiviuq\\php\\src\\r5\\syntax\\lexer.l"
CONCAT (all);						COUNT ( );
	YY_BREAK


case 64:
YY_RULE_SETUP
#line 168 "F:\\code\\kiviuq\\php\\src\\r5\\syntax\\lexer.l"
CALL (string_complex_concat);		COUNT ( );		RETURN ( );
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 169 "F:\\code\\kiviuq\\php\\src\\r5\\syntax\\lexer.l"
BEGIN (STRING_COMPLEX_END);		CALL (string_complex_name);			COUNT ( );		RETURN ( );
	YY_BREAK


case 66:
/* rule 66 can match eol */
YY_RULE_SETUP
#line 175 "F:\\code\\kiviuq\\php\\src\\r5\\syntax\\lexer.l"
BEGIN (STRING_COMPLEX_TEXT);	CALL (string_complex_concat);		WAIVE ( );		RETURN ( );
	YY_BREAK


case 67:
YY_RULE_SETUP
#line 181 "F:\\code\\kiviuq\\php\\src\\r5\\syntax\\lexer.l"
CALL (string_complex_concat);		COUNT ( );		RETURN ( );
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 182 "F:\\code\\kiviuq\\php\\src\\r5\\syntax\\lexer.l"
BEGIN (STRING_COMPLEX_TEXT);	CALL (string_complex_concat);		COUNT ( );		RETURN ( );
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 184 "F:\\code\\kiviuq\\php\\src\\r5\\syntax\\lexer.l"
CALL (string_complex_name);			COUNT ( );		RETURN ( );
	YY_BREAK


case 70:
/* rule 70 can match eol */
YY_RULE_SETUP
#line 190 "F:\\code\\kiviuq\\php\\src\\r5\\syntax\\lexer.l"
BEGIN (PHP);														COUNT ( );
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 192 "F:\\code\\kiviuq\\php\\src\\r5\\syntax\\lexer.l"
COUNT ( );
	YY_BREAK


case 72:
YY_RULE_SETUP
#line 198 "F:\\code\\kiviuq\\php\\src\\r5\\syntax\\lexer.l"
BEGIN (PHP);														COUNT ( );
	YY_BREAK
case 73:
/* rule 73 can match eol */
YY_RULE_SETUP
#line 200 "F:\\code\\kiviuq\\php\\src\\r5\\syntax\\lexer.l"
COUNT ( );
	YY_BREAK

case 74:
YY_RULE_SETUP
#line 205 "F:\\code\\kiviuq\\php\\src\\r5\\syntax\\lexer.l"
ECHO;
	YY_BREAK
#line 1626 "F:\\code\\kiviuq\\php\\src\\r5\\syntax\\lexer.yy.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 460 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 460 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 459);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

#define YYTABLES_NAME "yytables"

#line 205 "F:\\code\\kiviuq\\php\\src\\r5\\syntax\\lexer.l"




